{% extends "base.dtl" %}

{% block content %}
<div class="container">
  <div class="row">
    <div class="col-lg-12">
      <div class="divider"><p/></div>
    </div>
    <div class="static_div">
      <img src="/img/erlang_small.gif" alt="Erlang logo" border=0 align=right>

      <h1><a name=top>Erlang Programming Exercises</a></h1>
      <hr>

      <ul>
        <li><a href=#enter>Entering a program</a>
        <li><a href=#simple>Simple sequential programs</a>
        <li><a href=#recurs>Simple recursive programs</a>
        <li><a href=#conc>Interaction between processes, Concurrency</a>
        <li><a href=#ms>Master and Slaves, error handling</a>
        <li><a href=#robust>Robustness in Erlang, and use of a graphics package</a>
        <li><a href=#sockets>Erlang using UNIX sockets</a>
        <li><a href=#openp>The use of open_port/1</a>
        <li><a href=#sockcomm>Socket comunication between Erlang and C</a>
        <li><a href=#talk>Implementing Talk with Distributed Erlang</a>
        <li><a href=#dialog>Generating a parser for Datalog</a>
      </ul>

      <hr>
      <h1><a name=enter>Entering a program</a></h1>

      Type the <b>demo:double</b> example into a file called <b>demo.erl</b>.
      Use your favourite text editor.<p>

        Start Erlang.<p>

        Give the command <b>c:c(demo)</b>. to compile the file.<p>

        Try running the query:
<pre>
    demo:double(12).
</pre>
        This is just to test if you can get the system started and can
        use the editor together with the Erlang system.<p>
        <a href=#top>Back to top</a>

        <hr>
        <h1><a name=simple>Simple sequential programs</a></h1>

        1. Write functions <b>temp:f2c(F)</b> and<b> temp:c2f(C)</b> which
        convert between centigrade and Fahrenheit scales.
        (hint 5(F-32) = 9C) <p>
        2. Write a function <b>temp:convert(Temperature) </b>which
        combines the functionality of<b> f2c</b> and<b> c2f</b>. Example:
      <p>
<pre>
    &gt; temp:convert({c,100}).
    =&gt; {f,212}
    &gt; temp:convert({f,32}).
    =&gt; {c,0}
</pre>
      <p>
        3. Write a function <b>mathStuff:perimeter(Form)</b> which
        computes the perimeter of different forms.<b> Form</b> can be
        one of:
<pre>
    {square,Side}
    {circle,Radius}
    {triangle,A,B,C}
</pre>
        <a href=#top>Back to top</a>
        <hr>

        <h1><a name=recurs>Simple recursive programs</a></h1>
        1. Write a function <b>lists1:min(L)</b> which returns the mini-
        mum element of the list<b> L</b>.<p>

        2. Write a function<b> lists1:max(L)</b> which returns the
        maximum element of the list<b> L</b>.<p>

        3. Write a function<b> lists1:min_max(L)</b> which returns a
        tuple containing the min and max of the list <b>L</b>.
<pre>
    &gt; lists1:min_max([4,1,7,3,9,10])
    {1, 10}
</pre>
        4. Write the function<b> time:swedish_date()</b> which returns
        a string containing the date in swedish YYMMDD format:<p>
<pre>
    &gt; time:swedish_date()
    "080901"
</pre>
        <i>Hints: trying looking up <b>date()</b> and<b> time()</b> in the manual,
          You may also need <b>integer_to_list/1</b>. Try
          giving the shell queries to see what these BIF's do.)</i>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=conc>Interaction between processes, Concurrency</a></h1>

        1. Write a function which starts 2 processes, and sends a
        message M times forewards and backwards between them.
        After the messages have been sent the processes should terminate gracefully.<p>
        <img alt="Two processes communicating bidirectional" src="/img/course/ex1.gif"><p>


        2) Write a function which starts N processes in a ring, and
        sends a message M times around all the processes in the
        ring. After the messages have been sent the processes
        should terminate gracefully.<p>
        <img alt="Messages sent in a ring of processes" src="/img/course/ex2.gif"><p>
      <p>

        3) Write a function which starts N processes in a star, and
        sends a message to each of them M times. After the messages have been
        sent the processes should terminate gracefully.<p>
        <img alt="One process communicating bidirectional with other processes" src="/img/course/ex3.gif"><p>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=ms>Master and Slaves, error handling</a></h1>

        This problem illustrates a situation where we have a process
        (the master) which supervises other processes (the
        slaves). In a real example the slave could, for example, be
        controlling different hardware units. The master's job is to
        ensure that all the slave processes are alive. If a slave
        crashes (maybe because of a software fault), the master is
        to recreate the failed slave.<p>
        <img alt="A master supervises other processes" src="/img/course/ex4.gif"><p>
        Write a module<b> ms</b> with the following interface:<p>
        <b>start(N)</b> - Start the master and tell it to start<b> N</b> slave proc-
        esses. Register the master as the registered process <b>master</b>.<p>

        <b>to_slave(Message, N)</b> - Send a message to the master and
        tell it to relay the message to slave<b> N</b>. The slave should exit
        (and be restarted by the master) if the message is <b>die</b>.<p>

        The master should detect the fact that a slave processe diea
        nd restart it and print a message that it has done so.<p>

        The slave should print all messages it recieves except the
        message <b>die</b><p>

        <i>Hints:<br>

          The master should trap exit messages and create links to all
          the slave processes.<p>
            The master should keep a list of the process id's (pid's) of
            the slave processes and their associated numbers.<p></i>

        Example:
<pre>
    &gt; ms:start(4).
    =&gt; true
    &gt; ms:to_slave(hello, 2).
    =&gt; {hello,2}
    Slave 2 got message hello
    &gt; ms:to_slave(die, 3).
    =&gt; {die,3}
    master restarting dead slave3
</pre>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=robust>Robustness in Erlang, and use of a graphics package</a></h1>

        A robust system makes it possible to survive partial failure, i.e if some
        parts
        of the system crashes, it should be possible to recover instead of having a
        total system crash. In this exercise we will build a tree-like hierachy of
        processes that can recover if any of the tree-branches should crash.
      <p>
        To illustrate this  we are going to  use the  Interviews interface
        and having each process represented by a window on the screen.<p>

        <b>Excercise:</b> Create a window containing three buttons:
        <b>Quit , Spawn , Error</b>.<p>

        The <b>Spawn</b> button shall create a child process which displays
        an identical
        window.<p>

        The<b> Quit</b> button should kill the window and its child windows.<p>

        The <b>Error</b>
        button should cause a runtime error that kills the window (and its
        children), this window shall then be restarted by its parent.
      <p>

        Example: When we start our program, a window like this should appear:
      <p><img alt="Dialog with Quit Spawn and Error buttons" src="/img/course/ex5.gif"><p>

        Let us now press the <b>Spawn</b> button  twice and as result, two
        child windows will   pop up on  our  screen. Our screen  will now look
        something like this:<p><img alt="Three dialogs" src="/img/course/ex6.gif"><p>

        As you can see the windows are tagged with a number so it is easier for us
        to refer to them. The parent window has the number 84654 and its two childs
        number 8473 and 84735. Each child may have childs of its own, e.g press
        the<b> Spawn</b> button on window 84735 and we will have the following picture:
      <p><img alt="Four dialogs" src="/img/course/ex7.gif"><p>

        The window 8494 is a child to window 84735. <p>

        Now lets press the<b> Error</b>
        button in window 84735. Now a runtime error will
        occur in the process for that window and the process (and the window) will
        die. This shall cause the child 8494 also to die and the parent 84654 to start
        up a new child window.<p>

        The result will look something like this:
      <p><img alt="Three dialogs again" src="/img/course/ex8.gif"><p>

        The new child got number 85435.
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=sockets>Erlang using UNIX sockets</a></h1>

        Do you want to talk with a friend on another machine?
        Shouldn't it be nice to have a shell connected to your friend
        and transfer messages in between?<p>

        This can be implemented using the client/server concept
        with a process on each side listening to a socket for messages.<p>
        <ul>
          <li>Write a distributed (client/server) message passing
            system. The system shall be built upon the Erlang
            interface to the BSD unix sockets.
          <li>The server host name will be given as input argument
            in order to start the client.
          <li>A prompt shall be displayed both on the server and the
            client side. The user shall give a string followed by a
            RETURN as a message. The message will be transfered
            and displayed to the user on the other side.
          <li>An empty input string (on either side) will end the session.
        </ul>
        <i>
          (Hints: read the man-page for the socket interface, also in
          order to read the command line, use <b>io:get_line/1</b>)</i>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=openp>The use of open_port/1</a></h1>

        Use the<b> open_port({spawn,Name})</b> BIF in order to start an
        external UNIX process.
        <ul>
          <li>The Erlang program shall open a port, sending some
            data through the port, have the data echoed back and
            then printout the received data.
          <li>The C program that will run in the UNIX process shall
            consist of an eternal loop starting with a read from file
            descriptor 0 (stdin) and end with a write on file
            descriptor 1 (stdout) before it iterates again.
        </ul>
        <b>Note:</b> The first two bytes read in the C program contains the
        length in bytes of the data to follow <I>(Make sure that you are
          reading as much as the length indicates).</i><p>

        <i>
          (Hints: read the User's Guide p.37 and the BIF Guide p.11)</i>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=sockcomm>Socket comunication between Erlang and C</a></h1>
        Write Erlang and C programs which no the following:<p>
        <ul>
          <li>The Erlang program shall create a socket, waiting for
            accept, sending some data through the socket, have the
            data echoed back, printout the received data, and then
            close the socket.
          <li>The C program that will run in the UNIX process shall
            take the hostname of the host you are going to commu-
            nicate with as a parameter. Set up a socket to that host
            and then echo data as in the previous exercise.
        </ul>
        <i>(Hints: Include the files listed below. The main routine will
          look much the same as in the previous example. The code to
          setup the socket is found on the next page</i>

<pre>
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;errno.h&gt;

/*--- Setup a socket to Host using Port , return the filedesc. ---*/

static int setup_socket( hostname , port )
     char *hostname;
     int port;
{
  struct sockaddr_in serv_addr;
  int sockfd;
  struct hostent *hp;

  /*--- Get the address of the host ---*/

  if ((hp = gethostbyname( hostname )) == (struct hostent*) 0) {
    perror("From gethostbyname \n");
    exit(-1);
  }

  /*--- Fill in the address to the remote system ---*/

  bzero((char *) &serv_addr , sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;             /* Protocol family */
  serv_addr.sin_port   = htons( port );       /* The port number */
  bcopy(hp->h_addr_list[0] ,                  /* The net address to the host */
         (char *) &serv_addr.sin_addr.s_addr ,
         hp->h_length);

  /*--- Create the socket ---*/

  if ( (sockfd = socket( AF_INET , SOCK_STREAM , 0 )) < 0) {
    perror("setup_socket: socket");
    exit(-1);
  }

  /*--- Connect to the other system ---*/

  if (connect(sockfd, &serv_addr, sizeof(serv_addr)) < 0) {
    perror("setup_socket: connect");
    exit(-1);
  }
  else
    return sockfd;

}; /* setup_socket */

</pre>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=talk>Implementing Talk with Distributed Erlang</a></h1>
        Make a simple Talk program that makes it possible to chat
        with friends at other nodes/hosts.
        <ul>
          <li>First you and your friend must create identical
            <b>.erlang.cookie</b> files, e.g:<br>
<pre>
    <b>echo -n "dh32d8yhd8" &gt; ~/.erlang.cookie</b>
</pre>
          <li>Make sure nobody else can read it:
<pre>
    <b>chmod 400 ~/.erlang/cookie ).</b>
</pre>

          <li>
            Then start a distributed Erlang node:<br>
<pre>
    <b>erl -name bill -cookie</b>
</pre>

          <li>Now start your program. It should begin with promting
            for the other node name, and then promting for
            messages that will be sent to your friend for each carriage-return.
        </ul>
        <i>Hints:
          Your program should consist of two registered processes
          one for reading from the terminal and the other
          one for recieving messages from the other node then
          writing them to the terminal.
        </i>
      <p><a href=#top>Back to top</a>
        <hr>

        <h1><a name=dialog>Generating a parser for Datalog</a></h1>

        By using the Yecc parser generator we will generate a parser
        that will accept Datalog programs according to the specified
        grammar below. We will also have to use/modify a
        scanner (lexical analyser) to suit our purpose.</p>
      The syntax for Datalog can be described by the following
      grammar:

<pre>
	PGM -&gt; e
	PGM -&gt; CLAUSE PGM
	CLAUSE -&gt; LITERAL TAIL .
	LITERAL -&gt; predsym PARLIST
	PARLIST -&gt; e
	PARLIST -&gt; ( ARGLIST )
	ARGLIST -&gt; TERM ARGTAIL
	ARGTAIL -&gt; e
	ARGTAIL -&gt; , ARGLIST
	TERM -&gt; csym
	TERM -&gt; varsym
	TAIL -&gt; e
	TAIL -&gt; :- LITLIST
	LITLIST -&gt; LITERAL LITTAIL
	LITTAIL -&gt; e
	LITTAIL -&gt; , LITLIST
</pre>
      This grammar will accept Datalog programs, for example:
      <pre>    path(stockholm,uppsala).</pre>
      or:
      <pre>    route(X,Y) :- path(X,Z),path(Z,Y).</pre>
      The tokens produced by the scanner are defined as:
<pre>
	predsym = lc(lc + uc +digit)* | digit*
	csym = lc(lc + uc + digit)* | digit*
	varsym = uc(lc + uc + digit)*
	lc = any lowercase letter
	uc = any uppercase letter
	digit = any digit
</pre>

      To be able to solve this exercise you will have to read
      the man-page for Yecc (<b> erl -man yecc</b>).

      <!-- And use or modify the
           <a href="ex13_scanner.html">ex13_scanner.erl</a> file.
      <li>The parser should return some nice abstract form that
        you may specify yourself.
      <li>You may get some hints from looking into the file:
        <a href="esyntax1.html">esyntax.yrl</a>,which specifies the complete grammar
        for Erlang.
</ul> -->

      Good Luck !!

      <p><a href=#top>Back to top</a>
    </div>
  </div>
</div>
{% endblock %}
