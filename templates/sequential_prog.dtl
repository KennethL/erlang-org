{% extends "base.dtl" %}

{% block content %}
<div class="container">
  <div class="row">
    <div class="col-lg-12">
      <div class="divider"><p/></div>
    </div>
    <div class="static_div">
      <img src="/img/erlang_small.gif" alt="Erlang logo" align="right" border="0">

      <h1><a name=top>Sequential Programming</a></h1>

<hr>

<ul>
<li> <a href="#numbers"> Numbers</a>.
<ul>
<li> <a href="#integers"> Integers</a>
<li> <a href="#floats"> Floats</a>
</ul>
<li> <a href="#atoms"> Atoms</a>
<li> <a href="#tuples"> Tuples</a>
<li> <a href="#lists"> Lists</a>
<li> <a href="#variables"> Variables</a>
<li> <a href="#complex"> Complex Data Structures</a>
<li> <a href="#patterns"> Pattern Matching</a>
<li> <a href="#functions"> Function Calls</a>
<li> <a href="#modules"> The Module Systems</a>
<li> <a href="#starting"> Starting the system</a>
<li> <a href="#bifs"> Built in Functions (BIFs)</a>
<li> <a href="#funcsyntax"> Function syntax</a>
<li> <a href="#evaluation">An example of function evaluation</a>
<li> <a href="#guardedfuncs">Guarded function clauses</a>
<ul>
<li> <a href=#guardexample>Examples of Guards</a>
</ul>
<li> <a href=#listtrav>Traversing Lists</a>
<li> <a href=#listacc>Lists and Accumulators</a>
<li> <a href=#shell>Shell commands</a>
<li> <a href=#specialfuncs>Special Functions</a>
<li> <a href=#specialforms>Special Forms</a>
</ul>
<hr>

<h2><a name="numbers">Numbers</a></h2>

<b><a name="integers">Integers</a></b>

<pre>
	10
	-234
	16#AB10F
	2#110111010
	$A
</pre>

<b><a name="floats"> Floats</a></b>

<pre>
	 17.368
	 -56.654
	 12.34E-10.
</pre>


<ul>

<li> B#Val is used to store numbers in base
&lt B &gt.
<li> $Char is used for ascii values
(example $A instead of 65).
</ul>

<p><a href=#top>Back to top</a>
<hr>
<h2> <a name="atoms"> Atoms </a> </h2>

<pre>
	abcef
	start_with_a_lower_case_letter
	'Blanks can be quoted'
	'Anything inside quotes \n\012'
</pre>

<ul>
<li> Indefinite length atoms are allowed.
<li> Any character code is allowed within an
atom.
</ul>

<p><a href=#top>Back to top</a>
<hr>

<h2> <a name="tuples"> Tuples</a> </h2>

<pre>
	{123, bcd}
	{123, def, abc}
	{person, 'Joe', 'Armstrong'}
	{abc, {def, 123}, jkl}
	{}
</pre>

<ul>
<li> Used to store a fixed number of items.

<li> Tuples of any size are allowed.
</ul>

<p><a href=#top>Back to top</a>
<hr>

<h2> <a name="lists"> Lists</a> </h2>

<pre>
	[123, xyz]
	[123, def, abc]
	[{person, 'Joe', 'Armstrong'},
		{person, 'Robert', 'Virding'},
		{person, 'Mike', 'Williams'}
	]
	"abcdefghi"
		becomes - [97,98,99,100,101,102,103,104,105]
	""
		becomes - []
</pre>

<ul>
<li> Used to store a variable number of items.

<li> Lists are dynamically sized.

<li> "..." is short for the list of integers
representing the ascii character codes of the
enclosed within the quotes.
</ul>

<p><a href=#top>Back to top</a>
<hr>


<h2><a name=variables>Variables</a></h2>

<pre>
	Abc
	A_long_variable_name
	AnObjectOrientatedVariableName
</pre>

<ul>
<li> Start with an Upper Case Letter.

<li> No "funny characters".

<li> Variables are used to store values of data
structures.

<li> Variables can only be bound once! The
value of a variable can never be changed
once it has been set (bound).
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=complex>Complex Data Structures</a></h2>

<pre>
	[{ {person,'Joe', 'Armstrong'},
		{telephoneNumber, [3,5,9,7]},
		{shoeSize, 42},
		{pets, [{cat, tubby},{cat, tiger}]},
		{children,[{thomas, 5},{claire,1}]}},
	 { {person,'Mike','Williams'},
		{shoeSize,41},
		{likes,[boats, beer]},
		...
</pre>

<ul>
<li> Arbitrary complex structures can be cre-
ated.

<li> Data structures are created by writing
them down (no explicit memory alloca-
tion or deallocation is needed etc.).

<li> Data structures may contain bound vari-
ables.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=patterns>Pattern Matching</a></h2>

<pre>
	A = 10
		Succeeds - binds A to 10

	{B, C, D} = {10, foo, bar}
		Succeeds - binds B to 10, C to foo and D
		to bar

	{A, A, B} = {abc, abc, foo}
		Succeeds - binds A to abc, B to foo

	{A, A, B} = {abc, def, 123}
		Fails

	[A,B,C] = [1,2,3]
		Succeeds - binds A to 1, B to 2, C to 3

	[A,B,C,D] = [1,2,3]
		Fails
</pre>



<p><a href=#top>Back to top</a>
<hr>

<h2> Pattern Matching (Cont) </h2>

<pre>
	[A,B|C] = [1,2,3,4,5,6,7]
		Succeeds - binds A = 1, B = 2,
		C = [3,4,5,6,7]

	[H|T] = [1,2,3,4]
		Succeeds - binds H = 1, T = [2,3,4]

	[H|T] = [abc]
		Succeeds - binds H = abc, T = []

	[H|T] = []
		Fails

	{A,_, [B|_],{B}} = {abc,23,[22,x],{22}}
		Succeeds - binds A = abc, B = 22
</pre>

<ul>
<li> Note the use of "_", the anonymous (don't
care) variable.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=functions>Function Calls</a></h2>

<pre>
	module:func(Arg1, Arg2, ... Argn)

	func(Arg1, Arg2, .. Argn)
</pre>

<ul>
<li> Arg1 .. Argn are any Erlang data struc-
tures.

<li> The function and module names (func
and module in the above) must be atoms.

<li> A function can have zero arguments.
(e.g. date() - returns the current date).
<li> Functions are defined within Modules.
<li> Functions must be exported before they
can be called from outside the module
where they are defined.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=modules>Module System</a></h2>

<pre>
	-module(demo).
	-export([double/1]).

	double(X) -&gt;
		times(X, 2).

	times(X, N) -&gt;
		X * N.
</pre>

<ul>
<li> double can be called from outside the
module, times is local to the module.
<li> double/1 means the function double
with one argument (Note that double/1
and double/2 are two different functions).
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=starting>Starting the system</a></h2>

<pre>
	unix&gt; erl
	Eshell V2.0
	1&gt; c(demo).
	double/1 times/2 module_info/0
	compilation_succeeded
	2&gt; demo:double(25).
	50
	3&gt; demo:times(4,3).
	** undefined function:demo:times[4,3] **
	** exited: {undef,{demo,times,[4,3]}} **
	4&gt; 10 + 25.
	35
	5&gt;
</pre>

<ul>
<li> c(File) compiles the file File.erl.
<li> 1&gt; , 2&gt; ... are the shell prompts.
<li> The shell sits in a read-eval-print loop.
</ul>



<p><a href=#top>Back to top</a>
<hr>

<h2><a name=bifs>Built In Functions (BIFs)</a></h2>

<pre>
	date()
	time()
	length([1,2,3,4,5])
	size({a,b,c})
	atom_to_list(an_atom)
	list_to_tuple([1,2,3,4])
	integer_to_list(2234)
	tuple_to_list({})
</pre>

<ul>
<li> Are in the module erlang.

<li> Do what you cannot do (or is difficult to
do) in Erlang.
<li> Modify the behaviour of the system.
<li> Described in the BIFs manual.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=funcsyntax>Function Syntax</a></h2>

Is defined as a collection of clauses.

<pre>
	func(Pattern1, Pattern2, ...) -&gt;
		... ;
	func(Pattern1, Pattern2, ...) -&gt;
		... ;
		...
	func(Pattern1, Pattern2, ...) -&gt;
		... .
</pre>
<b>Evaluation Rules</b>

<ul>
<li> Clauses are scanned sequentially until a match is found.
<li> When a match is found all variables occurring in the head
become bound.
<li> Variables are local to each clause, and
are allocated and deallocated automatically.
<li> The body is evaluated sequentially.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2> Functions (cont) </h2>

<pre>
	-module(mathStuff).
	-export([factorial/1, area/1]).

	factorial(0) -&gt; 1;
	factorial(N) -&gt; N * factorial(N-1).

	area({square, Side}) -&gt;
		Side * Side;
	area({circle, Radius}) -&gt;
		% almost :-)
		3 * Radius * Radius;
	area({triangle, A, B, C}) -&gt;
		S = (A + B + C)/2,
		math:sqrt(S*(S-A)*(S-B)*(S-C));
	area(Other) -&gt;
		{invalid_object, Other}.
</pre>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=evaluation>Evaluation example</a></h2>

<pre>
	factorial(0) -&gt; 1;
	factorial(N) -&gt;
		N * factorial(N-1)
</pre>

<pre>
	&gt; factorial(3)
		matches N = 3 in clause 2
		== 3 * factorial(3 - 1)
		== 3 * factorial(2)
		matches N =2 in clause 2
		== 3 * 2 * factorial(2 - 1)
		== 3 * 2 * factorial(1)
		matches N = 1 in clause 2
		== 3 * 2 * 1 * factorial(1 - 1)
		== 3 * 2 * 1 �* factorial(0)
		== 3 * 2 * 1 �* 1 (clause 1)
		== 6
</pre>


<ul>
<li> Variables are local to each clause.
<li> Variables are allocated and deallocated
automatically.
</ul>

<p><a href=#top>Back to top</a>
<hr>

<h2><a name=guardedfuncs>Guarded Function Clauses</a></h2>

<pre>
	factorial(0) -&gt; 1;
	factorial(N) when N &gt; 0 -&gt;
		N * factorial(N - 1).
</pre>

<ul>
<li> The reserved word <b>when</b> introduces a
guard.
<li> Fully guarded clauses can be re-ordered.
</ul>

<pre>
	factorial(N) when N &gt; 0 -&gt;
		N * factorial(N - 1);
	factorial(0) -&gt; 1.
</pre>

<ul>
<li> This is NOT the same as:
</ul>

<pre>
	factorial(N) -&gt;
		N * factorial(N - 1);
	factorial(0) -&gt; 1.
</pre>


<ul>
<li> (incorrect!!)
</ul>




<p><a href=#top>Back to top</a>
<hr>

<h2><a name=guardexample>Examples of Guards</a></h2>

<pre>
	number(X)	- X is a number
	integer(X)	- X is an integer
	float(X)	- X is a float
	atom(X)		- X is an atom
	tuple(X)	- X is a tuple
	list(X)		- X is a list

	length(X) == 3	- X is a list of length 3
	size(X) == 2	- X is a tuple of size 2.

	X &gt; Y + Z	- X is &gt; Y + Z
	X == Y		- X is equal to Y
	X =:= Y		- X is exactly equal to Y
	                  (i.e. 1 == 1.0 succeeds but
			   1 =:= 1.0 fails)
</pre>

<ul>
<li> All variables in a guard must be bound.
<li> See the User Guide for a full list of
guards and allowed function calls.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=listtrav>Traversing Lists</a></h2>

<pre>
	average(X) -&gt; sum(X) / len(X).

	sum([H|T]) -&gt; H + sum(T);
	sum([]) -&gt; 0.

	len([_|T]) -&gt; 1 + len(T);
	len([]) -&gt; 0.
</pre>

<ul>

<li> Note the pattern of recursion is the same
in both cases. This pattern is very common.
</ul>

<b>Two other common patterns:</b>

<pre>
	double([H|T]) -&gt; [2*H|double(T)];
	double([]) -&gt; [].

	member(H, [H|_]) -&gt; true;
	member(H, [_|T]) -&gt; member(H, T);
	member(_, []) -&gt; false.
</pre>



<p><a href=#top>Back to top</a>
<hr>

<h2><a name=listacc>Lists and Accumulators</a></h2>

<pre>
	average(X) -&gt; average(X, 0, 0).

	average([H|T], Length, Sum) -&gt;
		average(T, Length + 1, Sum + H);
	average([], Length, Sum) -&gt;
		Sum / Length.
</pre>

<ul>
<li> Only traverses the list ONCE
<li> Executes in constant space (tail recursive)
<li> The variables Length and Sum play the
role of accumulators
<li> N.B. average([]) is not defined - (you cannot
have the average of zero elements) -
evaluating average([]) would cause a run-time error
- we discuss what happens when run time
errors occur in the section on
<a href="error_handling.html"> error handling </a>.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=shell>Shell Commands</a></h2>

<pre>
	h() - history . Print the last 20 commands.

	b() - bindings. See all variable bindings.

	f() - forget. Forget all variable bindings.

	f(Var) - forget. Forget the binding of variable
	X. This can ONLY be used as a command to
	the shell - NOT in the body of a function!

	e(n) - evaluate. Evaluate the n:th command
	in history.

	e(-1) - Evaluate the previous command.
</pre>

<ul>
<li> Edit the command line as in Emacs
<li> See the User Guide for more details and
examples of use of the shell.
</ul>


<p><a href=#top>Back to top</a>
<hr>

<h2><a name=specialfuncs>Special Functions</a></h2>

<pre>
	apply(Mod, Func, Args)
</pre>

<ul>
<li> Apply the function Func in the module Mod
to the arguments in the list Args.
<li> <code>Mod</code> and <code>Func</code> must be atoms (or
expressions which evaluate to atoms).
</ul>

<pre>
	1&gt; apply( lists1,min_max,[[4,1,7,3,9,10]]).
	{1, 10}
</pre>

<ul>
<li> Any Erlang expression can be used in
the arguments to apply.
</ul>

<p><a href=#top>Back to top</a>
<hr>

<h2><a name=specialforms>Special Forms</a></h2>
<pre>
	case lists:member(a, X) of
		true -&gt;
			... ;
		false -&gt;
			...
	end,
	...

	if
		integer(X) -&gt; ... ;
		tuple(X) -&gt; ...
	end,
	...
</pre>

<ul>
<li> Not really needed - but useful.

</ul>
<p><a href=#top>Back to top</a>

    </div>
  </div>
</div>
{% endblock %}
